GIT - Sistema de Controle de versão

Os Sistemas de controle de versões podem ajudar em nosso fluxo de desenvolvimento:
- mantendo um histórico de alterações;
- Nos ajudam a ter controle sobre cada alteração no código;
- Nos ajudam para que uma alteração de determinada pessoa não influencie na alteração realizada por outra;
Etc.


Servidor separado para receber as alterações ( Controle de Versçoa)

GIT é um dos mais utilizados.
Repositórios distribuidos.


git init - inilializar um repositório do git para ser monitorado.

Inicializa um repositório no diretório em que o comando for executado. A partir deste comando, o Git poderá gerenciar as modificações realizadas nos arquivos.



git status - mostra a situaçõa do repositorio

git add <nome_do-arquivo> - adiciona o arquivo a ser monitorado.


Git commit - é o check point ( dizer - aqui aconteceu uma alteraçõ).

git commit - m 'Criando arquivo index.html com lista de cursos'

Link adicional: https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Gravando-Altera%C3%A7%C3%B5es-em-Seu-Reposit%C3%B3rio

git log - verificar todas as alterações
git log --oneline - verifica as alterações em uma linha
git log -p = informações detalhas sobre os commits.

git config - para alterar nome e email
gi confi user.name
git confi user.email



VERIFICANDO HISTÓRICO DA APLICAÇÃO 
GIT LOG
LINK: https://devhints.io/git-log


IGNORANDO ARQUIVOS
criando o .gitignore

Não há  um consenso sobre quando comitar, mas VC NUNCA DEVE COMMITAR CÓDIGO COM PROBLEMA.

A cada alteração significativa, vc deve gerar um commit.
Não existe uma regra.

Sempre que uma pequena funcionalidade for implementada;
quando um bug for corrigido.

um conjunto de commits geram um sistema como um todo.



Repositórios Remotos - Servidor remoto para onde enviamos nossas alterações para que outras pessoas possam acessar

servidor remoto na maquina ( pago)

cd .. ( subir uma pasta)

mkdir nome-da-pasta - criar uma pasta

git init --bare  ( para ser um repositorio apenas para controlar as alteração - não será utilizado para editar aquirvo)
o parametro bere  repositorio puro , so contem as alterações e não os arquivos)
~/Documents/GitHub/Projetos-Alura/alura-git 
Com este comando nós criamos um repositório que não terá a working tree, ou seja, não conterá uma cópia dos nossos arquivos. Como o repositório servirá apenas como servidor, para que outros membros da equipe sincronizem seus trabalhos, poupamos espaço de armazenamento desta forma.


git remote add nome-repositorio caminho/para/o/repositorio
Desta forma teremos um link do nosso repositório local com o repositório remoto, que chamamos de nome-repositorio, que está armazenado em caminho/para/o/repositorio.


git remote -v ( para verificar o repositorio remoto)

git clone (caminho par ao repositorio remoto)


git push local master
 e assim, serão enviados todos os dados por todos os códigos e alterações feitas até então para nosso repositório que chamamos de "local", dentro de "servidor". Após pressionarmos "Enter", teremos a mensagem de que uma nova branch (ramo) foi criada em "servidor", chamada master.



puxar o sa dados


git pull ( repositorio local) master


Eu posso compartilhar um servidor local (uma pasta) ou um servidor remoto



Repositório remoto  (Github)

git push -u origin master

O que são repositórios remotos;
Como criar um repositório Git sem uma cópia dos arquivos (com --bare) para ser utilizado como servidor;
Como adicionar links para os repositórios remotos, com o comando git remote add;
Como baixar um repositório pela primeira vez, clonando-o com o comando git clone;
Como enviar as nossas alterações para um repositório remoto, com git push;
Como atualizar o nosso repositório com os dados no repositório remoto, utilizando git pull;


TRABALHANDO EM EQUIPES!

Branches ("ramos") são utilizados para desenvolver funcionalidades isoladas umas das outras. A branch master é a branch "padrão" quando você cria um repositório.

É interessante separar o desenvolvimento de funcionalidades em branches diferentes, para que as mudanças no código para uma não influencie no funcionamento de outra.

Ramificações do arquivo são para trabalhar melhor em equipe

Comandos:

visualizar branch
git branch


criar uma nova branch
git branch 'nome da branch'


para mudar a linha de desevovlimento

git checkout 'nome da branch'


ATALHO PARA CRIAR NOVA BRANCHE JÁ MUDAR PARA ELA

git checkout -b lista



Como levar o trabalho de um branch para outra.

UNIFICAÇÃO DE BRACNEHS - GIT MERGE

O master é a branch principal, poir precisamos trazer as alteraçãoes das outras branches para esta principal.

MASTER
TITULO

Para trazer a titulo para master é preciso:

git merge titulo ( a partir da master).

Desta forma colocaremos o HEAD na branch master, ou seja, faremos com que o nosso código esteja no estado que o deixamos com o último commit na master. Depois, uniremos o trabalho da branch titulo com a branch atual (master).


ATUALIZANDO A BRANCH

atualizando sem usar o merge;
utilizando um unica linha
commando 
A partir da master

git rebase titulo


MERGE OU REBASE

O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual.


Alternativa correta! Com isso, evitamos os commits de merge. Há uma longa discussão sobre o que é "melhor": rebase ou merge. Estude, pesquise, e tire suas próprias conclusões. Aqui tem um artigo (de milhares outros) que cita o assunto: https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c.



gIT PULL

Sempre antes de seguir com minha atualização devemos fazer GIT PULL


DESFAZENDO ALTERAÇÕES

git checkout -- <arquivo para ser desfeito>
git restore <arquivo para ser desfeito>

$ git checkout -- index.html
$ git restore index.html


Desfazendo git add

"git restore --staged <file>.
tatus


Desfazendo um Commit

git revert HASH (numero do comiit)


 

Quais os comandos, respectivamente, desfazem alterações antes de adicioná-las (1); depois de adicioná-las, mas antes de commitá-las (2); e após realizar o commit (3)?

1 - git checkout

2 - git reset

3 - git revert




--- Guardando um pedaço de alteração para voltar a trabalhar nela depois.

alteraçõs em um local temporario
Quando precisamos pausar o desenvolvimento de alguma funcionalidade, ou correção, antes de finalizar, talvez não seja interessante realizar um commit, pois o nosso código pode não estar funcionando ainda. Nesse caso é interessante salvar o trabalho para podermos voltar a ele depois.

git Stash


trazer dados do stach
opção 1
Git stash list ( lista do que posso aplicar)



git stach apply <numero da stach>
mas, as modificações continuam no stacsh

Logo após é necessári ofazer git stash drop

-- as duas coisas ao mesmo tempo - pegar a ulmtima alteraçõa e remover de lá


Git stash pop


--- Como viajar no tmepo no projeto

ao inves de usar o hash completo, vc pode usar os 7 primeiros numeros (git log -v)


 git checkout d74ccde
git status

Resumidamente, para que serve o comando git checkout?


Para deixar o nosso código em determinado estado


Alternativa correta! A descrição do comando git checkout --help, em uma tradução livre é: "Atualizar os arquivos na working tree para ficarem na versão especificada. [...]". Basicamente, podemos deixar o nosso código no estado do último commit de uma branch, de um commit específico, ou mesmo tags (que veremos adiante).

--- Como entregar um projeto entregável.


Nesta aula, aprendemos:

Que o Git pode nos ajudar a desfazer alterações que não vamos utilizar;
Que, para desfazer uma alteração antes de adicioná-la para commit (com git add), podemos utilizar o comando git checkout -- <arquivos>;
Que, para desfazer uma alteração após adicioná-la para commit, antes precisamos executar o git reset HEAD <arquivos> e depois podemos desfazê-las com git checkout -- <arquivos>;
Que, para revertermos as alterações realizadas em um commit, o comando git revert pode ser a solução;
Que o comando git revert gera um novo commit informando que alterações foram desfeitas;
Que, para guardar um trabalho para retomá-lo posteriormente, podemos utilizar o git stash;
Que, para visualizar quais alterações estão na stash, podemos utilizar o comando git stash list;
Que, com o comando git stash apply <numero>, podemos aplicar uma alteração específica da stash;
Que o comando git stash drop <numero> remove determinado item da stash;
Que o comando git stash pop aplica e remove a última alteração que foi adicionada na stash;
Que o git checkout serve para deixar a cópia do código da nossa aplicação no estado que desejarmos:
git checkout <branch> deixa o código no estado de uma branch com o nome <branch>;
git checkout <hash> deixa o código no estado do commit com o hash <hash>.

